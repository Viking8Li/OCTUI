1. JSX
2. props
3. Assignment(defult props)
4. State

Q. props vs state
1. props are passed in - state is managed within the component
2. props are immutable - state can be changed
3. state in FC implemented using hooks - CC imlemented as this.state
4. props in FC - this.props in CC

Q. why the call to super(props)

5. Fragments
6. Event Handling
7. Event Binding
8. Method as Props
9. Conditional Rendering
10. List Rendering

10a. Form Handling
11. Lifecycle hooks
12. Pure Components/memo

A regular compnent does not implement the shouldComponentUpdate method. It always returns true by default.
A pure component implements shouldComponentUpdate with a shallow props and state comparison

SC of prevState with currentState
SC pf prevProps with currentProps

Shallow comparison(SC)
--Primitive Types
a SC b returns true if a and b have the same value and are of the same Type
"John" SC "John"

--Complex Types
a SC b returns true if a and b references the same exact object

var a = {1,2,3}
var b = {1,2,3}
var c = a;

a===b //false
a===c //true


13. HOC
14. Refs
15. Portals
Q Why we need portals
16. Error Boundaries
static getDerivedStaetFromError(error)
componentDidCatch(error, info)
17. Render Props(using props whose value is a function)
18. Context API vs redux
a. Create the Context
b. Provide a context value
c. Consume the context value
19. HTTP Calls
20. Routing

Hooks
10-1 webinar -------- 2-4 resume reviews + mocks(html5, css, js)